├─ ./
│   ├─ .dockerignore

│   # --- Begin: .dockerignore ---
__pycache__/
*.pyc
*.pyo
*.pyd
*.db
*.sqlite3
/media/
.env
*.log
node_modules/
build/
dist/

│   # --- End: .dockerignore ---

│   ├─ .env

│   # --- Begin: .env ---
# --- ENV MODE ---
DEBUG=True

# --- Security ---
SECRET_KEY=your-very-secure-secret-key

# --- Hosts ---
ALLOWED_HOSTS=127.0.0.1,localhost

# --- CORS & CSRF ---
CORS_ALLOW_ALL_ORIGINS=False
CORS_ALLOWED_ORIGINS=http://localhost:3000
CSRF_TRUSTED_ORIGINS=http://localhost:3000

# --- Cookie Security ---
# These are now auto-handled in settings.py using `DEBUG`

# --- Database ---
DB_NAME=bankinsightdb
DB_USER=postgres
DB_PASSWORD=sushantno111
DB_HOST=localhost
DB_PORT=5432

# --- Media & AI Model ---
MEDIA_ROOT=media/
BERT_MODEL_NAME=kuro-08/bert-transaction-categorization

│   # --- End: .env ---

│   ├─ .gitignore

│   # --- Begin: .gitignore ---
test.py
project_dump.txt

# ========== PYTHON / DJANGO ==========
__pycache__/
*.py[cod]
*.sqlite3
*.log
*.db
*.pot
*.pyc
*.pyo
*.pyd
.env
.env.local
media/
staticfiles/
static/



# ========== DOCKER / SYSTEM ==========
*.pid
*.tar
*.gz
*.zip
*.tgz
*.bak
.DS_Store
*.swp
*.swo
.vscode/
.idea/
docker-compose.override.yml


│   # --- End: .gitignore ---

│   ├─ docker-compose.yml

│   # --- Begin: docker-compose.yml ---
version: '3.9'

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: transactiq-backend
    command: gunicorn bankinsight_backend.wsgi:application --bind 0.0.0.0:8000
    ports:
      - "8000:8000"
    env_file:
      - .env
    volumes:
      - .:/app
    depends_on:
      - db

  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: transactiq-frontend
    ports:
      - "3000:80"
    depends_on:
      - backend

  db:
    image: postgres:15
    container_name: transactiq-db
    environment:
      POSTGRES_DB: bankinsightdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: sushantno111
    volumes:
      - postgres_data:/var/lib/postgresql/data

volumes:
  postgres_data:

│   # --- End: docker-compose.yml ---

│   ├─ Dockerfile

│   # --- Begin: Dockerfile ---
# Base image with Python
FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    libpq-dev \
    tesseract-ocr \
    poppler-utils \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy the rest of the code
COPY . .

# Collect static files
RUN python manage.py collectstatic --noinput

# Environment variables (in production use Docker secrets or .env)
ENV DJANGO_SETTINGS_MODULE=bankinsight_backend.settings

# Run with Gunicorn
CMD ["gunicorn", "bankinsight_backend.wsgi:application", "--bind", "0.0.0.0:8000"]

│   # --- End: Dockerfile ---

│   ├─ manage.py

│   # --- Begin: manage.py ---
#!/usr/bin/env python
import os
import sys
import logging

logging.basicConfig(level=logging.DEBUG)
print("⚠ manage.py is running")

def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bankinsight_backend.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)

if __name__ == '__main__':
    main()

│   # --- End: manage.py ---

│   ├─ Procfile

│   # --- Begin: Procfile ---
web: gunicorn bankinsight_backend.wsgi:application --log-file -

│   # --- End: Procfile ---

│   ├─ project_dump.txt

│   # --- Begin: project_dump.txt ---

│   # --- End: project_dump.txt ---

│   ├─ README.md

│   # --- Begin: README.md ---

# 💰 TransactIQ - Personal Finance Analyzer

TransactIQ is a personal finance web app that helps users upload and analyze their bank statements. It uses OCR and machine learning to extract and categorize transactions, offering financial insights like monthly trends, categorized expenses, and top merchants.

---

## 🔍 Key Features

- 📤 Upload bank statement PDFs
- 🧠 Automatic OCR + NLP-based transaction extraction
- 📊 Financial insights with interactive charts
- 🔒 JWT authentication (register, login, change password)
- 📁 Download reports in CSV or ZIP format
- 🧾 Reprocess uploaded statements anytime

---

## 📦 Technologies Used

- **Frontend:** React, Bootstrap, Recharts
- **Backend:** Django, Django REST Framework, PostgreSQL
- **OCR & NLP:** Tesseract, pdfplumber, HuggingFace Transformers (BERT)
- **Auth:** JWT (SimpleJWT)

---

## ⚙️ How to Use

1. **Register** or **Login** using your email and password.
2. Navigate to the dashboard to:
   - 📤 Upload a bank statement (PDF format only).
   - 📈 View categorized financial insights.
   - 📄 Browse extracted transactions.
   - 📦 Download full reports (CSV/ZIP).
   - 🔁 Reprocess previously uploaded statements.
3. Access the **Change Password** section for account security.

> All your data is stored securely and accessible only to you.

---

## 🧠 AI Insights

- Automatically categorizes your transactions into types like:
  - Food, Travel, Shopping, Utilities, etc.
- Summarizes total income, total spending, and estimated savings.
- Suggests budgeting tips based on your spending behavior.

---




│   # --- End: README.md ---

│   ├─ requirements.txt

│   # --- Begin: requirements.txt ---
Django>=4.2
djangorestframework>=3.14
psycopg2-binary>=2.9
pdfplumber>=0.10.2
pytesseract>=0.3.10
python-dotenv>=1.0.0
transformers>=4.41.1
torch>=2.3.0
Pillow>=10.3.0
django-cors-headers>=4.3.1
djangorestframework-simplejwt>=5.3.1

│   # --- End: requirements.txt ---

│   ├─ test.py

│   # --- Begin: test.py ---
import os

def dump_project_to_txt(root_dir, output_file):
    """
    Dumps the full file structure and content of all files in the project,
    excluding only specific heavy/unnecessary folders and specific files.
    """
    # Folders to completely ignore (e.g., large or non-code)
    skip_dirs = {
        "node_modules", ".git", "__pycache__", "venv",
        ".idea", ".vscode", "dist", "build", ".mypy_cache"
    }

    # Specific filenames to ignore (e.g., lockfiles or OS files)
    skip_files = {
        "package-lock.json", "yarn.lock", ".DS_Store"
    }

    with open(output_file, "w", encoding="utf-8") as f:
        for dirpath, dirnames, filenames in os.walk(root_dir):
            # Exclude unwanted directories during traversal
            dirnames[:] = [d for d in dirnames if d not in skip_dirs]

            level = dirpath.replace(root_dir, "").count(os.sep)
            indent = "│   " * level
            f.write(f"{indent}├─ {os.path.basename(dirpath)}/\n")

            sub_indent = "│   " * (level + 1)
            for filename in filenames:
                if filename in skip_files:
                    continue

                full_path = os.path.join(dirpath, filename)
                f.write(f"{sub_indent}├─ {filename}\n")

                try:
                    with open(full_path, "r", encoding="utf-8") as code_file:
                        code = code_file.read()
                        f.write(f"\n{sub_indent}# --- Begin: {filename} ---\n")
                        f.write(code + "\n")
                        f.write(f"{sub_indent}# --- End: {filename} ---\n\n")
                except Exception as e:
                    f.write(f"{sub_indent}[Could not read {filename}: {e}]\n")

# Example usage
dump_project_to_txt(".", "project_dump.txt")

│   # --- End: test.py ---

│   ├─ bankinsight_backend/
│   │   ├─ settings.py

│   │   # --- Begin: settings.py ---
from dotenv import load_dotenv
import os
from pathlib import Path
from datetime import timedelta

# === Load .env variables ===
BASE_DIR = Path(__file__).resolve().parent.parent
dotenv_path = BASE_DIR / ".env"
load_dotenv(dotenv_path=dotenv_path)

# === Security ===
SECRET_KEY = os.getenv("SECRET_KEY", "unsafe-dev-secret-key")
DEBUG = os.getenv("DEBUG", "False") == "True"
ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "").split(",")

# === CSRF / CORS ===
CSRF_TRUSTED_ORIGINS = os.getenv("CSRF_TRUSTED_ORIGINS", "").split(",")
CORS_ALLOW_ALL_ORIGINS = os.getenv("CORS_ALLOW_ALL_ORIGINS", "False") == "True"
CORS_ALLOWED_ORIGINS = os.getenv("CORS_ALLOWED_ORIGINS", "").split(",")

# === Secure cookies (auto-toggle) ===
SESSION_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_SECURE = not DEBUG

# === Installed apps ===
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    "rest_framework",
    "corsheaders",
    "core",
]

# === Middleware ===
MIDDLEWARE = [
    "whitenoise.middleware.WhiteNoiseMiddleware",

    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
]

# === URLs ===
ROOT_URLCONF = "bankinsight_backend.urls"

# === Templates ===
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# === WSGI ===
WSGI_APPLICATION = "bankinsight_backend.wsgi.application"

# === Database ===
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("DB_NAME"),
        "USER": os.getenv("DB_USER"),
        "PASSWORD": os.getenv("DB_PASSWORD"),
        "HOST": os.getenv("DB_HOST"),
        "PORT": os.getenv("DB_PORT"),
    }
}

# === Custom User Model ===
AUTH_USER_MODEL = "core.User"

# === Static / Media ===
STATIC_URL = "/static/"
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
STATIC_ROOT = os.path.join(BASE_DIR, "static/")

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, os.getenv("MEDIA_ROOT", "media/"))

# === REST Framework ===
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.UserRateThrottle",
        "rest_framework.throttling.AnonRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {
        "user": "1000/day",
        "anon": "100/day"
    }
}

# === JWT (optional) ===
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
}

# === Misc ===
LANGUAGE_CODE = "en-us"
TIME_ZONE = "Asia/Kolkata"
USE_I18N = True
USE_TZ = True
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

│   │   # --- End: settings.py ---

│   │   ├─ urls.py

│   │   # --- Begin: urls.py ---
# Root URL configuration
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path("api/", include("core.urls")),
]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

│   │   # --- End: urls.py ---

│   │   ├─ wsgi.py

│   │   # --- Begin: wsgi.py ---
# WSGI config for bankinsight_backend project
import os
from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bankinsight_backend.settings')

application = get_wsgi_application()
from whitenoise import WhiteNoise
application = WhiteNoise(application)

│   │   # --- End: wsgi.py ---

│   │   ├─ __init__.py

│   │   # --- Begin: __init__.py ---

│   │   # --- End: __init__.py ---

│   ├─ client/
│   │   ├─ .env

│   │   # --- Begin: .env ---
REACT_APP_API_URL=http://127.0.0.1:8000/api
CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
CSRF_TRUSTED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000

│   │   # --- End: .env ---

│   │   ├─ .gitignore

│   │   # --- Begin: .gitignore ---
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

│   │   # --- End: .gitignore ---

│   │   ├─ Dockerfile

│   │   # --- Begin: Dockerfile ---
# Use Node as the build environment
FROM node:20-alpine as build

# Set working directory
WORKDIR /app

# Copy package.json and install dependencies
COPY package*.json ./
RUN npm install

# Copy all source files and build
COPY . .
RUN npm run build

# ======= Production Nginx server =========
FROM nginx:alpine

# Copy built files to Nginx web root
COPY --from=build /app/build /usr/share/nginx/html

# Copy custom nginx config (optional)
# COPY nginx.conf /etc/nginx/nginx.conf

# Expose port 80
EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]

│   │   # --- End: Dockerfile ---

│   │   ├─ package.json

│   │   # --- Begin: package.json ---
{
  "name": "client",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/dom": "^10.4.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^1.9.0",
    "bootstrap": "^5.3.6",
    "react": "^19.1.0",
    "react-bootstrap": "^2.10.10",
    "react-dom": "^19.1.0",
    "react-icons": "^5.5.0",
    "react-router-dom": "^7.6.2",
    "react-scripts": "5.0.1",
    "recharts": "^2.15.3",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "proxy": "http://127.0.0.1:8000"
}

│   │   # --- End: package.json ---

│   │   ├─ README.md

│   │   # --- Begin: README.md ---
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

│   │   # --- End: README.md ---

│   │   ├─ public/
│   │   │   ├─ favicon.ico
│   │   │   [Could not read favicon.ico: 'utf-8' codec can't decode byte 0xe3 in position 14: invalid continuation byte]
│   │   │   ├─ index.html

│   │   │   # --- Begin: index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

│   │   │   # --- End: index.html ---

│   │   │   ├─ logo192.png
│   │   │   [Could not read logo192.png: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]
│   │   │   ├─ logo512.png
│   │   │   [Could not read logo512.png: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]
│   │   │   ├─ manifest.json

│   │   │   # --- Begin: manifest.json ---
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

│   │   │   # --- End: manifest.json ---

│   │   │   ├─ robots.txt

│   │   │   # --- Begin: robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

│   │   │   # --- End: robots.txt ---

│   │   ├─ src/
│   │   │   ├─ App.css

│   │   │   # --- Begin: App.css ---
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

│   │   │   # --- End: App.css ---

│   │   │   ├─ App.js

│   │   │   # --- Begin: App.js ---
import React from "react";
import { AuthProvider } from "./context/AuthContext";
import AppRoutes from "./routes";
import Sidebar from "./components/Sidebar";
import "./styles/global.css";

function App() {
  return (
    <AuthProvider>
      <div className="d-flex">
        <Sidebar />
        <div className="flex-grow-1 p-3 bg-light min-vh-100">
          <AppRoutes />
        </div>
      </div>
    </AuthProvider>
  );
}

export default App;

│   │   │   # --- End: App.js ---

│   │   │   ├─ App.test.js

│   │   │   # --- Begin: App.test.js ---
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

│   │   │   # --- End: App.test.js ---

│   │   │   ├─ index.css

│   │   │   # --- Begin: index.css ---
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

│   │   │   # --- End: index.css ---

│   │   │   ├─ index.js

│   │   │   # --- Begin: index.js ---
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import "bootstrap/dist/css/bootstrap.min.css";
import { BrowserRouter } from "react-router-dom";

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
  <BrowserRouter>
    <App />
  </BrowserRouter>
);

│   │   │   # --- End: index.js ---

│   │   │   ├─ logo.svg

│   │   │   # --- Begin: logo.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
│   │   │   # --- End: logo.svg ---

│   │   │   ├─ reportWebVitals.js

│   │   │   # --- Begin: reportWebVitals.js ---
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

│   │   │   # --- End: reportWebVitals.js ---

│   │   │   ├─ routes.js

│   │   │   # --- Begin: routes.js ---
import React from "react";
import { Routes, Route, Navigate } from "react-router-dom";
import Login from "./pages/Login";
import Register from "./pages/Register";
import Dashboard from "./pages/Dashboard";
import ChangePassword from "./pages/ChangePassword";
import { useAuth } from "./context/AuthContext";

export default function AppRoutes() {
  const { user } = useAuth();

  return (
    <Routes>
      <Route path="/" element={<Navigate to={user ? "/dashboard" : "/login"} />} />
      <Route path="/login" element={<Login />} />
      <Route path="/register" element={<Register />} />
      <Route path="/dashboard" element={user ? <Dashboard /> : <Navigate to="/login" />} />
      <Route path="/change-password" element={user ? <ChangePassword /> : <Navigate to="/login" />} />
      <Route path="*" element={<Navigate to="/" />} />
    </Routes>
  );
}

│   │   │   # --- End: routes.js ---

│   │   │   ├─ setupTests.js

│   │   │   # --- Begin: setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

│   │   │   # --- End: setupTests.js ---

│   │   │   ├─ components/
│   │   │   │   ├─ ChartsSection.js

│   │   │   │   # --- Begin: ChartsSection.js ---
import React from "react";
import {
  LineChart, Line, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer,
  PieChart, Pie, Cell, BarChart, Bar
} from "recharts";
import { Card } from "react-bootstrap";

const COLORS = ["#008080", "#00C49F", "#FFBB28", "#FF8042", "#AF19FF", "#FF4560"];

export default function ChartsSection({ insights }) {
  const trends = Object.entries(insights.monthly_trends || {}).map(([month, total]) => ({
    month,
    total: parseFloat(total),
  }));

  const expenses = Object.entries(insights.categorized_expenses || {}).map(
    ([category, total]) => ({ name: category, value: parseFloat(total) })
  );

  const merchants = insights.top_merchants.map(([merchant, count]) => ({
    merchant,
    count,
  }));

  return (
    <div className="row">
      <div className="col-md-6">
        <Card className="mb-4 shadow-sm">
          <Card.Body>
            <Card.Title>📈 Monthly Trends</Card.Title>
            <ResponsiveContainer width="100%" height={250}>
              <LineChart data={trends}>
                <XAxis dataKey="month" />
                <YAxis />
                <Tooltip />
                <Legend />
                <Line type="monotone" dataKey="total" stroke="#008080" />
              </LineChart>
            </ResponsiveContainer>
          </Card.Body>
        </Card>
      </div>

      <div className="col-md-6">
        <Card className="mb-4 shadow-sm">
          <Card.Body>
            <Card.Title>🧾 Expense Categories</Card.Title>
            <ResponsiveContainer width="100%" height={250}>
              <PieChart>
                <Pie data={expenses} dataKey="value" nameKey="name" outerRadius={80} label>
                  {expenses.map((_, i) => (
                    <Cell key={`cell-${i}`} fill={COLORS[i % COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip />
                <Legend />
              </PieChart>
            </ResponsiveContainer>
          </Card.Body>
        </Card>
      </div>

      <div className="col-md-12">
        <Card className="mb-4 shadow-sm">
          <Card.Body>
            <Card.Title>🏪 Top Merchants</Card.Title>
            <ResponsiveContainer width="100%" height={250}>
              <BarChart data={merchants}>
                <XAxis dataKey="merchant" />
                <YAxis />
                <Tooltip />
                <Legend />
                <Bar dataKey="count" fill="#00A896" />
              </BarChart>
            </ResponsiveContainer>
          </Card.Body>
        </Card>
      </div>
    </div>
  );
}

│   │   │   │   # --- End: ChartsSection.js ---

│   │   │   │   ├─ FileUploader.js

│   │   │   │   # --- Begin: FileUploader.js ---
import React, { useState } from "react";
import { Card, Button, Form, Alert } from "react-bootstrap";
import api from "../services/api";

export default function FileUploader({ onUploadComplete }) {
  const [file, setFile] = useState(null);
  const [status, setStatus] = useState("");

  const handleFileChange = (e) => {
    setFile(e.target.files[0]);
    setStatus("");
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!file) return;

    const formData = new FormData();
    formData.append("uploaded_file", file);

    try {
      setStatus("Processing...");
      await api.post("/upload/statement/", formData, {
        headers: { "Content-Type": "multipart/form-data" },
      });
      setStatus("✅ Upload successful.");
      setFile(null);
      onUploadComplete();
    } catch {
      setStatus("❌ Upload failed.");
    }
  };

  return (
    <Card className="mb-4 shadow-sm">
      <Card.Body>
        <h5>📤 Upload Bank Statement</h5>
        <Form onSubmit={handleSubmit}>
          <Form.Group controlId="formFile">
            <Form.Control
              type="file"
              accept="application/pdf"
              onChange={handleFileChange}
              required
            />
            {file && <small className="text-muted mt-1">Selected: {file.name}</small>}
          </Form.Group>
          <Button className="mt-2" type="submit" disabled={!file || status === "Processing..."}>
            Upload & Process
          </Button>
        </Form>
        {status && (
          <Alert className="mt-3" variant={status.includes("✅") ? "success" : "danger"}>
            {status}
          </Alert>
        )}
      </Card.Body>
    </Card>
  );
}

│   │   │   │   # --- End: FileUploader.js ---

│   │   │   │   ├─ InsightCards.js

│   │   │   │   # --- Begin: InsightCards.js ---
import React from "react";
import { Card } from "react-bootstrap";
import { FaMoneyBillWave, FaWallet, FaPiggyBank, FaLightbulb } from "react-icons/fa";

const ICONS = [
  <FaMoneyBillWave size={24} color="#008080" />,
  <FaWallet size={24} color="#008080" />,
  <FaPiggyBank size={24} color="#008080" />,
  <FaLightbulb size={24} color="#008080" />,
];

export default function InsightCards({ insights }) {
  const { savings_summary } = insights;

  const cardData = [
    { title: "Total Income", value: savings_summary.total_income },
    { title: "Total Expenses", value: savings_summary.total_expenses },
    { title: "Estimated Savings", value: savings_summary.estimated_savings },
    { title: "Advice", value: savings_summary.suggestion },
  ];

  return (
    <div className="row">
      {cardData.map((card, idx) => (
        <div key={idx} className="col-md-3 mb-3">
          <Card className="h-100">
            <Card.Body>
              <div className="d-flex align-items-center mb-2">
                {ICONS[idx]}
                <Card.Title className="ms-2 mb-0">{card.title}</Card.Title>
              </div>
              <Card.Text className="text-muted">{card.value}</Card.Text>
            </Card.Body>
          </Card>
        </div>
      ))}
    </div>
  );
}

│   │   │   │   # --- End: InsightCards.js ---

│   │   │   │   ├─ Sidebar.js

│   │   │   │   # --- Begin: Sidebar.js ---
import React from "react";
import { NavLink } from "react-router-dom";
import { useAuth } from "../context/AuthContext";
import { FaHome, FaChartPie, FaFileInvoice, FaTools, FaKey, FaSignOutAlt } from "react-icons/fa";

export default function Sidebar() {
  const { user, logout } = useAuth();

  if (!user) return null;

  return (
    <div className="sidebar bg-teal text-white p-3" style={{ width: "220px", minHeight: "100vh" }}>
      <h4 className="text-white mb-4">💰 TransactIQ</h4>
      <ul className="nav flex-column">
        <li className="nav-item">
          <NavLink to="/dashboard" className="nav-link text-white">
            <FaHome className="me-2" /> Dashboard
          </NavLink>
        </li>
        <li className="nav-item">
          <NavLink to="/dashboard#insights" className="nav-link text-white">
            <FaChartPie className="me-2" /> Insights
          </NavLink>
        </li>
        <li className="nav-item">
          <NavLink to="/dashboard#transactions" className="nav-link text-white">
            <FaFileInvoice className="me-2" /> Transactions
          </NavLink>
        </li>
        <li className="nav-item">
          <NavLink to="/dashboard#tools" className="nav-link text-white">
            <FaTools className="me-2" /> Tools
          </NavLink>
        </li>
        <li className="nav-item">
          <NavLink to="/change-password" className="nav-link text-white">
            <FaKey className="me-2" /> Change Password
          </NavLink>
        </li>
        <li className="nav-item mt-3">
          <button className="btn btn-outline-light w-100" onClick={logout}>
            <FaSignOutAlt className="me-2" /> Logout
          </button>
        </li>
      </ul>
    </div>
  );
}

│   │   │   │   # --- End: Sidebar.js ---

│   │   │   │   ├─ StatementActions.js

│   │   │   │   # --- Begin: StatementActions.js ---
import React, { useState } from "react";
import { Form, Button, Alert } from "react-bootstrap";
import api from "../services/api";

export default function StatementActions({ onReprocess }) {
  const [statementId, setStatementId] = useState("");
  const [message, setMessage] = useState("");

  const downloadZip = async () => {
    if (!statementId) return alert("Enter statement ID first");
    try {
      const res = await api.get(`/download/statement/${statementId}/`, { responseType: "blob" });
      const url = window.URL.createObjectURL(new Blob([res.data]));
      const link = document.createElement("a");
      link.href = url;
      link.setAttribute("download", `statement_${statementId}.zip`);
      document.body.appendChild(link);
      link.click();
      link.remove();
    } catch {
      alert("Download failed");
    }
  };

  const reprocess = async () => {
    if (!statementId) return alert("Enter statement ID");
    try {
      const res = await api.post(`/reprocess_statement/${statementId}/`);
      setMessage(res.data.message || "Reprocessed successfully");
      onReprocess();
    } catch {
      setMessage("Reprocessing failed.");
    }
  };

  return (
    <div className="mt-3">
      <Form className="row g-3">
        <div className="col-md-4">
          <Form.Control
            placeholder="Statement ID"
            type="number"
            onChange={(e) => setStatementId(e.target.value)}
          />
        </div>
        <div className="col-md-4">
          <Button variant="outline-primary" onClick={downloadZip}>
            Download ZIP
          </Button>{" "}
          <Button variant="outline-warning" onClick={reprocess}>
            Reprocess
          </Button>
        </div>
      </Form>
      {message && <Alert className="mt-3">{message}</Alert>}
    </div>
  );
}

│   │   │   │   # --- End: StatementActions.js ---

│   │   │   │   ├─ TransactionTable.js

│   │   │   │   # --- Begin: TransactionTable.js ---
import React from "react";
import { Table } from "react-bootstrap";

export default function TransactionTable({ transactions }) {
  return (
    <Table striped bordered hover responsive className="shadow-sm">
      <thead className="table-dark">
        <tr>
          <th>Date</th>
          <th>Description</th>
          <th>Amount</th>
          <th>Category</th>
          <th>Type</th>
        </tr>
      </thead>
      <tbody>
        {transactions.map((txn) => (
          <tr key={txn.id}>
            <td>{txn.date}</td>
            <td>{txn.description}</td>
            <td className={txn.is_credit ? "text-success" : "text-danger"}>₹ {txn.amount}</td>
            <td>{txn.category}</td>
            <td>{txn.is_credit ? "Credit" : "Debit"}</td>
          </tr>
        ))}
      </tbody>
    </Table>
  );
}

│   │   │   │   # --- End: TransactionTable.js ---

│   │   │   ├─ context/
│   │   │   │   ├─ AuthContext.js

│   │   │   │   # --- Begin: AuthContext.js ---
import { createContext, useContext, useEffect, useState } from "react";
import axios from "../services/api";

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [authTokens, setAuthTokens] = useState(() =>
    localStorage.getItem("authTokens") ? JSON.parse(localStorage.getItem("authTokens")) : null
  );
  const [user, setUser] = useState(null);

  useEffect(() => {
    if (authTokens) fetchUserProfile();
  }, [authTokens]);

  const fetchUserProfile = async () => {
    try {
      const res = await axios.get("/auth/profile/");
      setUser(res.data);
    } catch {
      logout();
    }
  };

  const login = async (email, password) => {
    const res = await axios.post("/auth/login/", { email, password });
    localStorage.setItem("authTokens", JSON.stringify(res.data.tokens));
    setAuthTokens(res.data.tokens);
    setUser({ email: res.data.email });
  };

  const register = async (email, full_name, password) => {
    const res = await axios.post("/auth/register/", { email, full_name, password });
    localStorage.setItem("authTokens", JSON.stringify(res.data.tokens));
    setAuthTokens(res.data.tokens);
    setUser({ email: res.data.user.email });
  };

  const logout = () => {
    localStorage.removeItem("authTokens");
    setAuthTokens(null);
    setUser(null);
  };

  return (
    <AuthContext.Provider value={{ user, authTokens, login, register, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => useContext(AuthContext);

│   │   │   │   # --- End: AuthContext.js ---

│   │   │   ├─ pages/
│   │   │   │   ├─ ChangePassword.js

│   │   │   │   # --- Begin: ChangePassword.js ---
import React, { useState } from "react";
import { Button, Card, Container, Form, Alert } from "react-bootstrap";
import api from "../services/api";

export default function ChangePassword() {
  const [formData, setFormData] = useState({ current_password: "", new_password: "" });
  const [message, setMessage] = useState("");

  const handleChange = (e) =>
    setFormData({ ...formData, [e.target.name]: e.target.value });

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const res = await api.post("/auth/change-password/", formData);
      setMessage(res.data.message || "Password changed successfully.");
    } catch {
      setMessage("Password change failed. Please check credentials.");
    }
  };

  return (
    <Container className="d-flex justify-content-center align-items-center" style={{ minHeight: "80vh" }}>
      <Card className="p-4" style={{ minWidth: "320px", maxWidth: "400px", width: "100%" }}>
        <h4 className="mb-3 text-center">🔒 Change Password</h4>
        <Form onSubmit={handleSubmit}>
          {message && <Alert variant={message.includes("success") ? "success" : "danger"}>{message}</Alert>}
          <Form.Group className="mb-3">
            <Form.Label>Current Password</Form.Label>
            <Form.Control type="password" name="current_password" value={formData.current_password} onChange={handleChange} required />
          </Form.Group>
          <Form.Group className="mb-3">
            <Form.Label>New Password</Form.Label>
            <Form.Control type="password" name="new_password" value={formData.new_password} onChange={handleChange} required />
          </Form.Group>
          <Button variant="warning" type="submit" className="w-100">Update Password</Button>
        </Form>
      </Card>
    </Container>
  );
}

│   │   │   │   # --- End: ChangePassword.js ---

│   │   │   │   ├─ Dashboard.js

│   │   │   │   # --- Begin: Dashboard.js ---
import React, { useEffect, useState } from "react";
import { Tabs, Tab, Spinner, Alert } from "react-bootstrap";
import { useAuth } from "../context/AuthContext";
import api from "../services/api";
import InsightCards from "../components/InsightCards";
import ChartsSection from "../components/ChartsSection";
import FileUploader from "../components/FileUploader";
import TransactionTable from "../components/TransactionTable";
import StatementActions from "../components/StatementActions";

export default function Dashboard() {
  const { user } = useAuth();
  const [insights, setInsights] = useState(null);
  const [transactions, setTransactions] = useState([]);
  const [loading, setLoading] = useState(true);

  const loadInsights = async () => {
    try {
      const res = await api.get("/insights/");
      setInsights(res.data);
    } catch (err) {
      console.error("Failed to load insights:", err);
    }
  };

  const loadTransactions = async (query = "") => {
    try {
      const res = await api.get(`/transactions/${query}`);
      setTransactions(res.data);
    } catch (err) {
      console.error("Failed to load transactions:", err);
    } finally {
      setLoading(false);
    }
  };

  const refreshAll = async () => {
    setLoading(true);
    await loadTransactions();
    await loadInsights();
  };

  useEffect(() => {
    refreshAll();
  }, []);

  return (
    <div className="container mt-4">
      <h3>Welcome, {user?.email}</h3>
      <FileUploader onUploadComplete={refreshAll} />

      <Tabs defaultActiveKey="insights" className="my-3">
        <Tab eventKey="insights" title="💡 Financial Insights">
          {insights ? (
            <>
              <InsightCards insights={insights} />
              <ChartsSection insights={insights} />
            </>
          ) : (
            <Spinner animation="border" />
          )}
        </Tab>

        <Tab eventKey="transactions" title="📄 Transactions">
          {loading ? (
            <Spinner animation="border" />
          ) : transactions.length === 0 ? (
            <Alert variant="info">No transactions found.</Alert>
          ) : (
            <TransactionTable transactions={transactions} />
          )}
        </Tab>

        <Tab eventKey="tools" title="🧰 Statement Tools">
          <StatementActions onReprocess={refreshAll} />
        </Tab>
      </Tabs>
    </div>
  );
}

│   │   │   │   # --- End: Dashboard.js ---

│   │   │   │   ├─ Login.js

│   │   │   │   # --- Begin: Login.js ---
import React, { useState } from "react";
import { Button, Card, Container, Form, Alert } from "react-bootstrap";
import { useNavigate, Link } from "react-router-dom";
import { useAuth } from "../context/AuthContext";
import { FaLock } from "react-icons/fa";

export default function Login() {
  const { login } = useAuth();
  const navigate = useNavigate();

  const [formData, setFormData] = useState({ email: "", password: "" });
  const [error, setError] = useState("");

  const handleChange = (e) =>
    setFormData({ ...formData, [e.target.name]: e.target.value });

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await login(formData.email, formData.password);
      navigate("/dashboard");
    } catch {
      setError("Invalid credentials. Please try again.");
    }
  };

  return (
    <Container className="d-flex justify-content-center align-items-center" style={{ minHeight: "90vh" }}>
      <Card className="p-4 shadow-sm" style={{ minWidth: "320px", maxWidth: "400px", width: "100%" }}>
        <div className="text-center mb-3">
          <FaLock size={36} color="#008080" />
          <h4 className="mt-2">Login to TransactIQ</h4>
        </div>
        <Form onSubmit={handleSubmit}>
          {error && <Alert variant="danger">{error}</Alert>}
          <Form.Group className="mb-3">
            <Form.Label>Email</Form.Label>
            <Form.Control type="email" name="email" value={formData.email} onChange={handleChange} required />
          </Form.Group>
          <Form.Group className="mb-3">
            <Form.Label>Password</Form.Label>
            <Form.Control type="password" name="password" value={formData.password} onChange={handleChange} required />
          </Form.Group>
          <Button type="submit" className="w-100" style={{ backgroundColor: "#008080", border: "none" }}>
            Login
          </Button>
        </Form>

        <div className="text-center mt-3">
          <Link to="/change-password" style={{ color: "#008080", fontSize: "0.9rem" }}>
            Forgot Password?
          </Link>
          <br />
          <span style={{ fontSize: "0.9rem" }}>
            Don’t have an account?{" "}
            <Link to="/register" style={{ color: "#008080" }}>
              Register
            </Link>
          </span>
        </div>
      </Card>
    </Container>
  );
}

│   │   │   │   # --- End: Login.js ---

│   │   │   │   ├─ Register.js

│   │   │   │   # --- Begin: Register.js ---
import React, { useState } from "react";
import { Button, Card, Container, Form, Alert } from "react-bootstrap";
import { useNavigate, Link } from "react-router-dom";
import { useAuth } from "../context/AuthContext";
import { FaUserPlus } from "react-icons/fa";

export default function Register() {
  const { register } = useAuth();
  const navigate = useNavigate();

  const [formData, setFormData] = useState({ full_name: "", email: "", password: "" });
  const [error, setError] = useState("");

  const handleChange = (e) =>
    setFormData({ ...formData, [e.target.name]: e.target.value });

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await register(formData.email, formData.full_name, formData.password);
      navigate("/dashboard");
    } catch {
      setError("Registration failed. Please try again.");
    }
  };

  return (
    <Container className="d-flex justify-content-center align-items-center" style={{ minHeight: "90vh" }}>
      <Card className="p-4 shadow-sm" style={{ minWidth: "320px", maxWidth: "400px", width: "100%" }}>
        <div className="text-center mb-3">
          <FaUserPlus size={36} color="#008080" />
          <h4 className="mt-2">Register to TransactIQ</h4>
        </div>
        <Form onSubmit={handleSubmit}>
          {error && <Alert variant="danger">{error}</Alert>}
          <Form.Group className="mb-3">
            <Form.Label>Full Name</Form.Label>
            <Form.Control type="text" name="full_name" value={formData.full_name} onChange={handleChange} required />
          </Form.Group>
          <Form.Group className="mb-3">
            <Form.Label>Email</Form.Label>
            <Form.Control type="email" name="email" value={formData.email} onChange={handleChange} required />
          </Form.Group>
          <Form.Group className="mb-3">
            <Form.Label>Password</Form.Label>
            <Form.Control type="password" name="password" value={formData.password} onChange={handleChange} required />
          </Form.Group>
          <Button type="submit" className="w-100" style={{ backgroundColor: "#008080", border: "none" }}>
            Register
          </Button>
        </Form>

        <div className="text-center mt-3">
          <span style={{ fontSize: "0.9rem" }}>
            Already have an account?{" "}
            <Link to="/login" style={{ color: "#008080" }}>
              Login
            </Link>
          </span>
        </div>
      </Card>
    </Container>
  );
}

│   │   │   │   # --- End: Register.js ---

│   │   │   ├─ services/
│   │   │   │   ├─ api.js

│   │   │   │   # --- Begin: api.js ---
import axios from "axios";

const api = axios.create({
  baseURL: process.env.REACT_APP_API_URL || "http://localhost:8000",
});

api.interceptors.request.use((config) => {
  const tokens = JSON.parse(localStorage.getItem("authTokens"));
  if (tokens?.access) {
    config.headers.Authorization = `Bearer ${tokens.access}`;
  }
  return config;
});

export default api;

│   │   │   │   # --- End: api.js ---

│   │   │   ├─ styles/
│   │   │   │   ├─ global.css

│   │   │   │   # --- Begin: global.css ---
body {
    font-family: "Segoe UI", sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f8f9fa;
  }
  
  .sidebar {
    background-color: #008080;
  }
  
  .nav-link.active {
    font-weight: bold;
    background-color: #006666;
    border-radius: 5px;
  }
  
  .card {
    border-radius: 0.6rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
  }
  
  h3, h4, h5 {
    font-weight: 600;
  }


  
│   │   │   │   # --- End: global.css ---

│   ├─ core/
│   │   ├─ urls.py

│   │   # --- Begin: urls.py ---
# App-specific routes
from django.urls import path
from core.views.auth_views import RegisterView, LoginView, ChangePasswordView
from core.views.insight_views import UserTransactionListView
from core.views.upload_views import StatementUploadView
from core.views.upload_views import ReprocessStatementView
from core.views.insight_views import FinancialInsightsView
from core.views.auth_views import ProfileView

from core.views.insight_views import ExportAllTransactionsCSV
from core.views.upload_views import ExportStatementZIP
urlpatterns = [
    path("auth/register/", RegisterView.as_view(), name="register"),
    path("auth/login/", LoginView.as_view(), name="login"),
    path("upload/statement/", StatementUploadView.as_view(), name="upload_statement"),
    path("insights/", FinancialInsightsView.as_view(), name="financial_insights"),
    path("transactions/", UserTransactionListView.as_view(), name="user_transactions"),
    path("reprocess_statement/<int:statement_id>/", ReprocessStatementView.as_view(), name="reprocess_statement"),
    path("download/transactions/", ExportAllTransactionsCSV.as_view(), name="export_all_csv"),
    path("download/statement/<int:statement_id>/", ExportStatementZIP.as_view(), name="export_statement_zip"),
    # core/urls.py
    path("auth/profile/", ProfileView.as_view(), name="auth_profile"),
    path("auth/change_password/", ChangePasswordView.as_view(), name="change_password"),
]

│   │   # --- End: urls.py ---

│   │   ├─ migrations/
│   │   │   ├─ 0001_initial.py

│   │   │   # --- Begin: 0001_initial.py ---
# Generated by Django 5.2.3 on 2025-06-13 08:11

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('full_name', models.CharField(max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
        migrations.CreateModel(
            name='Statement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uploaded_file', models.FileField(upload_to='statements/')),
                ('uploaded_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('raw_text', models.TextField(blank=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='statements', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('description', models.TextField()),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('category', models.CharField(max_length=100)),
                ('is_credit', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('statement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='core.statement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]

│   │   │   # --- End: 0001_initial.py ---

│   │   │   ├─ __init__.py

│   │   │   # --- Begin: __init__.py ---

│   │   │   # --- End: __init__.py ---

│   │   ├─ models/
│   │   │   ├─ statement.py

│   │   │   # --- Begin: statement.py ---
# PDF metadata model
from django.db import models
from core.models import User
from django.utils import timezone


class Statement(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name="statements")
    uploaded_file = models.FileField(upload_to="statements/")
    uploaded_at = models.DateTimeField(default=timezone.now)
    raw_text = models.TextField(blank=True)  # OCR output

    def __str__(self):
        return f"Statement {self.id} by {self.user.email}"

│   │   │   # --- End: statement.py ---

│   │   │   ├─ transaction.py

│   │   │   # --- Begin: transaction.py ---
# Transaction model
from django.db import models
from core.models import User, Statement


class Transaction(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name="transactions")
    statement = models.ForeignKey(Statement, on_delete=models.CASCADE, related_name="transactions")
    
    date = models.DateField()
    description = models.TextField()
    amount = models.DecimalField(max_digits=12, decimal_places=2)
    category = models.CharField(max_length=100)
    is_credit = models.BooleanField(default=False)

    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.date} - {self.amount} - {self.category}"

│   │   │   # --- End: transaction.py ---

│   │   │   ├─ user.py

│   │   │   # --- Begin: user.py ---
# Custom User model implementation
from django.contrib.auth.models import AbstractBaseUser, PermissionsMixin, BaseUserManager
from django.db import models
from django.utils import timezone


class UserManager(BaseUserManager):
    def create_user(self, email, password=None, **extra_fields):
        if not email:
            raise ValueError("The Email field must be set")
        email = self.normalize_email(email)
        user = self.model(email=email, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    # ✅ Replace create_superuser with this:
    def create_superuser(self, email, password=None, **extra_fields):
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)
        if not password:
            raise ValueError("Superusers must have a password.")
        return self.create_user(email, password, **extra_fields)

class User(AbstractBaseUser, PermissionsMixin):
    email = models.EmailField(unique=True, max_length=255)
    full_name = models.CharField(max_length=100)
    is_active = models.BooleanField(default=True)
    date_joined = models.DateTimeField(default=timezone.now)

    objects = UserManager()

    USERNAME_FIELD = "email"
    REQUIRED_FIELDS = ["full_name"]

    def __str__(self):
        return self.email

    class Meta:
        verbose_name = "User"
        verbose_name_plural = "Users"

│   │   │   # --- End: user.py ---

│   │   │   ├─ __init__.py

│   │   │   # --- Begin: __init__.py ---
from .user import User
from .statement import Statement
from .transaction import Transaction

__all__ = ["User", "Statement", "Transaction"]

│   │   │   # --- End: __init__.py ---

│   │   ├─ serializers/
│   │   │   ├─ insight_serializer.py

│   │   │   # --- Begin: insight_serializer.py ---
# Insight model serializer
from rest_framework import serializers

class CategoryBreakdownSerializer(serializers.Serializer):
    category = serializers.CharField()
    total_spent = serializers.DecimalField(max_digits=12, decimal_places=2)

class MonthlyTrendSerializer(serializers.Serializer):
    month = serializers.CharField()
    total_spent = serializers.DecimalField(max_digits=12, decimal_places=2)

class TopMerchantSerializer(serializers.Serializer):
    merchant = serializers.CharField()
    amount = serializers.DecimalField(max_digits=12, decimal_places=2)

class RecurringExpenseSerializer(serializers.Serializer):
    description = serializers.CharField()
    monthly_average = serializers.DecimalField(max_digits=12, decimal_places=2)

class SmartSuggestionSerializer(serializers.Serializer):
    suggestion = serializers.CharField()

│   │   │   # --- End: insight_serializer.py ---

│   │   │   ├─ statement_serializer.py

│   │   │   # --- Begin: statement_serializer.py ---
# Statement model serializer
from rest_framework import serializers
from core.models.statement import Statement


class StatementUploadSerializer(serializers.ModelSerializer):
    class Meta:
        model = Statement
        fields = ["id", "uploaded_file", "uploaded_at", "raw_text"]
        read_only_fields = ["id", "uploaded_at", "raw_text"]

│   │   │   # --- End: statement_serializer.py ---

│   │   │   ├─ transaction_serializer.py

│   │   │   # --- Begin: transaction_serializer.py ---
# Transaction model serializer
from rest_framework import serializers
from core.models.transaction import Transaction


class TransactionSerializer(serializers.ModelSerializer):
    class Meta:
        model = Transaction
        fields = "__all__"
        read_only_fields = ["id", "user", "created_at"]

│   │   │   # --- End: transaction_serializer.py ---

│   │   │   ├─ user_serializer.py

│   │   │   # --- Begin: user_serializer.py ---
# User model serializer

from rest_framework import serializers
from core.models import User
from django.contrib.auth import authenticate


class UserRegisterSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True, min_length=6)

    class Meta:
        model = User
        fields = ["email", "full_name", "password"]

    def create(self, validated_data):
        return User.objects.create_user(**validated_data)


class UserLoginSerializer(serializers.Serializer):
    email = serializers.EmailField()
    password = serializers.CharField(write_only=True)

    def validate(self, data):
        user = authenticate(email=data["email"], password=data["password"])
        if not user:
            raise serializers.ValidationError("Invalid credentials.")
        data["user"] = user
        return data

│   │   │   # --- End: user_serializer.py ---

│   │   │   ├─ __init__.py

│   │   │   # --- Begin: __init__.py ---
from .user_serializer import *
from .statement_serializer import *
from .transaction_serializer import *
from .insight_serializer import *

│   │   │   # --- End: __init__.py ---

│   │   ├─ tasks/
│   │   │   ├─ ai_service.py

│   │   │   # --- Begin: ai_service.py ---
# core/tasks/ai_service.py
from transformers import pipeline
import logging
import re

logger = logging.getLogger(__name__)

class TransactionCategorizer:
    _instance = None

    def __new__(cls):
        if cls._instance is None:
            try:
                cls._instance = pipeline(
                    "text-classification",
                    model="kuro-08/bert-transaction-categorization",
                    tokenizer="kuro-08/bert-transaction-categorization"
                )
            except Exception as e:
                logger.warning(f"BERT model load failed: {e}")
                cls._instance = None
        return cls._instance

│   │   │   # --- End: ai_service.py ---

│   │   │   ├─ ai_utils.py

│   │   │   # --- Begin: ai_utils.py ---
from collections import defaultdict
from datetime import datetime
from core.models.transaction import Transaction
import logging

logger = logging.getLogger(__name__)

STOP_WORDS = {"amazon", "services", "payment", "debit", "upi", "account"}

def get_categorized_expense_breakdown(user):
    result = defaultdict(float)
    for txn in Transaction.objects.filter(user=user, is_credit=False):
        result[txn.category] += float(txn.amount)
    return dict(result)

def get_monthly_trends(user):
    trends = defaultdict(float)
    for txn in Transaction.objects.filter(user=user, is_credit=False):
        key = txn.date.strftime("%Y-%m")
        trends[key] += float(txn.amount)
    return dict(trends)

def get_top_merchants(user, top_n=5):
    merchant_count = defaultdict(int)
    for txn in Transaction.objects.filter(user=user):
        words = txn.description.lower().split()
        for w in words:
            if w.isalpha() and len(w) > 3 and w not in STOP_WORDS:
                merchant_count[w] += 1
    sorted_merchants = sorted(merchant_count.items(), key=lambda x: x[1], reverse=True)
    return sorted_merchants[:top_n]

def get_recurring_expenses(user):
    raw_txns = Transaction.objects.filter(user=user, is_credit=False)
    grouped = defaultdict(list)
    for txn in raw_txns:
        grouped[txn.description.lower()].append(float(txn.amount))

    recurring = {}
    for desc, amounts in grouped.items():
        if len(amounts) >= 3:
            avg_amt = sum(amounts) / len(amounts)
            recurring[desc] = round(avg_amt, 2)

    return recurring

def get_savings_insights(user):
    credits = sum(txn.amount for txn in Transaction.objects.filter(user=user, is_credit=True))
    debits = sum(txn.amount for txn in Transaction.objects.filter(user=user, is_credit=False))
    savings = credits - debits
    return {
        "total_income": round(credits, 2),
        "total_expenses": round(debits, 2),
        "estimated_savings": round(savings, 2),
        "suggestion": "Reduce dining or subscriptions if low on savings." if savings < (0.1 * credits) else "You're saving well!"
    }

│   │   │   # --- End: ai_utils.py ---

│   │   │   ├─ ocr.py

│   │   │   # --- Begin: ocr.py ---
# pdfplumber + pytesseract implementation
import pdfplumber
import pytesseract
from pdf2image import convert_from_path
from pathlib import Path
import logging
logger = logging.getLogger(__name__)

# Optional: Set Tesseract path if needed (Windows)
pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"


def extract_text_from_pdf(file_path: str) -> str:
    try:
        full_text = ""

        with pdfplumber.open(file_path) as pdf:
            for page in pdf.pages:
                text = page.extract_text()
                if text:
                    full_text += text + "\n"

        if full_text.strip():
            return full_text

        # If text-based OCR fails, use image OCR
        images = convert_from_path(file_path)
        for image in images:
            full_text += pytesseract.image_to_string(image)

        return full_text.strip()

    except Exception as e:
        logger.error(f"OCR failed for {file_path}: {str(e)}")
        return "[OCR Failed]"
│   │   │   # --- End: ocr.py ---

│   │   │   ├─ preprocess.py

│   │   │   # --- Begin: preprocess.py ---
import re
from datetime import datetime
from transformers import pipeline
from core.models.transaction import Transaction
from core.models.statement import Statement
from core.tasks.ai_service import TransactionCategorizer
import logging

logger = logging.getLogger(__name__)

# Load the BERT model for transaction categorization

bert_model = TransactionCategorizer()
#  Mapping of model output labels to real categories
LABEL_MAP = {
    "Label_0": "Utilities",
    "Label_1": "Health",
    "Label_2": "Dining",
    "Label_3": "Travel",
    "Label_4": "Education",
    "Label_5": "Subscription",
    "Label_6": "Family",
    "Label_7": "Food",
    "Label_8": "Festivals",
    "Label_9": "Culture",
    "Label_10": "Apparel",
    "Label_11": "Transportation",
    "Label_12": "Investment",
    "Label_13": "Shopping",
    "Label_14": "Groceries",
    "Label_15": "Documents",
    "Label_16": "Grooming",
    "Label_17": "Entertainment",
    "Label_18": "Social Life",
    "Label_19": "Beauty",
    "Label_20": "Rent",
    "Label_21": "Money transfer",
    "Label_22": "Salary",
    "Label_23": "Tourism",
    "Label_24": "Household",
}


# Regular expressions to match various bank statement formats
REGEX_PATTERNS = [
    {
        "pattern": re.compile(
            r"(?P<date>\d{2}/\d{2}/\d{4})\s+(?P<desc>.+?)\s+(?P<amount>[\d,]+\.\d{2})\s+(?P<type>CR|DR)"
        ),
        "date_format": "%d/%m/%Y",
        "has_crdr": True
    },
    {
        "pattern": re.compile(
            r"(?P<date>\d{2}-\d{2}-\d{4})\s+(?P<desc>[A-Za-z\s]+)\s+\d+\s+Rs\s(?P<amount>[\d,]+\.\d{2})"
        ),
        "date_format": "%d-%m-%Y",
        "has_crdr": False
    },
    {
        "pattern": re.compile(
            r"(?P<date>\d{4}-\d{2}-\d{2})\s+(?P<desc>.+?)\s+(?P<amount>[\d,]+\.\d{2})"
        ),
        "date_format": "%Y-%m-%d",
        "has_crdr": False
    },
    # Add more patterns as needed
]


def extract_transactions(raw_text):
    """
    Try all known patterns and extract transactions intelligently.
    Returns a list of dicts with keys: date, description, amount, is_credit
    """
    for parser in REGEX_PATTERNS:
        pattern = parser["pattern"]
        has_crdr = parser["has_crdr"]
        date_format = parser["date_format"]
        matches = list(pattern.finditer(raw_text))

        if not matches:
            continue  # Try next pattern

        logger.info(f"Matched {len(matches)} transactions using format: {date_format}")
        transactions = []

        for match in matches:
            try:
                date_str = match.group("date").strip()
                description = match.group("desc").strip()
                amount_str = match.group("amount").replace(",", "").strip()
                amount = float(amount_str)
                txn_date = datetime.strptime(date_str, date_format).date()

                if has_crdr:
                    txn_type = match.group("type").strip().upper()
                    is_credit = txn_type == "CR"
                else:
                    is_credit = False  # fallback for unsupported formats

                transactions.append({
                    "date": txn_date,
                    "description": description,
                    "amount": amount,
                    "is_credit": is_credit
                })
            except Exception as e:
                logger.warning(f"Transaction parse error: {e} in line: {match.group(0)}")

        if transactions:
            return transactions

    logger.warning("No matching regex patterns found for transaction extraction.")
    return []


def categorize_transaction(description):
    if not bert_model:
        logger.warning("BERT model not available, defaulting to 'Uncategorized'.")
        return "Uncategorized"

    try:
        outputs = bert_model(description[:256])
        if not outputs or not isinstance(outputs, list) or not isinstance(outputs[0], dict):
            logger.warning(f"Unexpected model output: {outputs}")
            return "Uncategorized"

        result = outputs[0]
        raw_label = result.get("label", "")
        normalized_label = raw_label.capitalize().replace("label_", "Label_")
        category = LABEL_MAP.get(normalized_label, "Uncategorized")

        logger.info(f"Categorized: '{description[:30]}...' as '{category}' (label: {normalized_label})")

        return category

    except Exception as e:
        logger.warning(f"Categorization failed for '{description}': {e}")
        return "Uncategorized"


def process_and_store_transactions(user, statement):
    """
    Extract, categorize, and store transactions from raw OCR text.
    """
    transactions = extract_transactions(statement.raw_text)
    logger.info(f"Processing {len(transactions)} transactions for user {user.email}")

    for txn in transactions:
        category = categorize_transaction(txn["description"])
        Transaction.objects.create(
            user=user,
            statement=statement,
            date=txn["date"],
            description=txn["description"],
            amount=txn["amount"],
            is_credit=txn["is_credit"],
            category=category
        )

    return len(transactions)

│   │   │   # --- End: preprocess.py ---

│   │   │   ├─ __init__.py

│   │   │   # --- Begin: __init__.py ---
from .ocr import *
from .preprocess import *
from .ai_utils import *

│   │   │   # --- End: __init__.py ---

│   │   ├─ utils/
│   │   │   ├─ auth.py

│   │   │   # --- Begin: auth.py ---
# JWT/session authentication logic
# Placeholder — Add custom logic here later, if needed (e.g., token decoding, custom claims, etc.)
# utils/auth.py
# TODO: Add custom JWT decoding or claims logic here if needed
│   │   │   # --- End: auth.py ---

│   │   │   ├─ helpers.py

│   │   │   # --- Begin: helpers.py ---
# Utility functions
# TODO: Add reusable helper functions (e.g., date formatting, number utils)
│   │   │   # --- End: helpers.py ---

│   │   │   ├─ __init__.py

│   │   │   # --- Begin: __init__.py ---
from .auth import *
from .helpers import *

│   │   │   # --- End: __init__.py ---

│   │   ├─ views/
│   │   │   ├─ auth_views.py

│   │   │   # --- Begin: auth_views.py ---
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from rest_framework_simplejwt.tokens import RefreshToken
from core.serializers.user_serializer import UserRegisterSerializer, UserLoginSerializer
import logging
from rest_framework.permissions import AllowAny, IsAuthenticated
from core.models import User  # Add this import for the User model

logger = logging.getLogger(__name__)

def get_tokens_for_user(user):
    refresh = RefreshToken.for_user(user)
    return {
        "refresh": str(refresh),
        "access": str(refresh.access_token),
    }

class RegisterView(APIView):
    permission_classes = [AllowAny]

    def post(self, request):
        logger.info(f"Registration attempt: {request.data.get('email')}")
        email = request.data.get("email")
        full_name = request.data.get("full_name")
        password = request.data.get("password")

        if not email or "@" not in email:
            return Response({"detail": "Invalid email."}, status=400)

        if User.objects.filter(email=email).exists():
            return Response({"detail": "Email already exists."}, status=400)

        user = User.objects.create_user(
            email=email,
            full_name=full_name,
            password=password,
        )
        refresh = RefreshToken.for_user(user)
        return Response({
            "user": {
                "email": user.email,
                "full_name": user.full_name
            },
            "tokens": {
                "access": str(refresh.access_token),
                "refresh": str(refresh)
            }
    
})

class LoginView(APIView):
    permission_classes = [AllowAny]
    def post(self, request):
        logger.info(f"Login attempt: {request.data.get('email')}")
        serializer = UserLoginSerializer(data=request.data)
        if serializer.is_valid():
            user = serializer.validated_data["user"]
            tokens = get_tokens_for_user(user)
            logger.info(f"User logged in: {user.email}")
            return Response({"tokens": tokens, "email": user.email, "is_superuser": user.is_superuser,}, status=status.HTTP_200_OK)
        logger.warning(f"Login failed: {serializer.errors}")
        return Response(serializer.errors, status=status.HTTP_401_UNAUTHORIZED)

class ProfileView(APIView):
    permission_classes = [IsAuthenticated]
    def get(self, request):
        user = request.user
        return Response({
            "email": user.email,
            "full_name": user.full_name
        })

class ChangePasswordView(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request):
        logger.info(f"Password change attempt for user: {request.user.email}")
        user = request.user
        old_password = request.data.get("old_password")
        new_password = request.data.get("new_password")

        if not user.check_password(old_password):
            return Response({"detail": "Old password is incorrect."}, status=400)

        user.set_password(new_password)
        user.save()

        return Response({"detail": "Password changed successfully."})
│   │   │   # --- End: auth_views.py ---

│   │   │   ├─ insight_views.py

│   │   │   # --- Begin: insight_views.py ---
# insightsview.py

from rest_framework import generics, filters, status
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from django.http import HttpResponse
from django_filters.rest_framework import DjangoFilterBackend
import csv, logging
from io import StringIO
from core.models.transaction import Transaction
from core.serializers.transaction_serializer import TransactionSerializer
from core.tasks.ai_utils import (
    get_categorized_expense_breakdown,
    get_monthly_trends,
    get_top_merchants,
    get_recurring_expenses,
    get_savings_insights,
)

logger = logging.getLogger(__name__)

class FinancialInsightsView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        logger.info(f" Generating financial insights for user: {request.user.email}")
        user = request.user
        try:
            data = {
                "categorized_expenses": get_categorized_expense_breakdown(user),
                "monthly_trends": get_monthly_trends(user),
                "top_merchants": get_top_merchants(user),
                "recurring_expenses": get_recurring_expenses(user),
                "savings_summary": get_savings_insights(user)
            }
            return Response(data, status=status.HTTP_200_OK)
        except Exception as e:
            logger.error(f"Insight generation failed: {e}")
            return Response({"error": "Failed to generate insights"}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class UserTransactionListView(generics.ListAPIView):
    serializer_class = TransactionSerializer
    permission_classes = [IsAuthenticated]
    filter_backends = [DjangoFilterBackend, filters.OrderingFilter, filters.SearchFilter]
    filterset_fields = ['category', 'is_credit']
    search_fields = ['description']
    ordering_fields = ['date', 'amount']

    def get_queryset(self):
        logger.info(f"Fetching transactions for user: {self.request.user.email}")
        user = self.request.user
        month = self.request.query_params.get('month')
        queryset = Transaction.objects.filter(user=user)

        if month:
            try:
                year, month = map(int, month.split('-'))
                queryset = queryset.filter(date__year=year, date__month=month)
            except ValueError:
                logger.warning("Invalid month format")
        return queryset


class ExportAllTransactionsCSV(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        logger.info(f"Exporting all transactions to CSV for user: {request.user.email}")
        user = request.user
        try:
            transactions = Transaction.objects.filter(user=user)
            response = HttpResponse(content_type='text/csv')
            response['Content-Disposition'] = 'attachment; filename="all_transactions.csv"'

            writer = csv.writer(response)
            writer.writerow(['Date', 'Description', 'Amount', 'Category', 'Credit/Debit'])

            for txn in transactions:
                writer.writerow([
                    txn.date.strftime('%Y-%m-%d'),
                    txn.description,
                    txn.amount,
                    txn.category,
                    'Credit' if txn.is_credit else 'Debit'
                ])
            return response
        except Exception as e:
            logger.error(f"CSV export failed: {e}")
            return Response({"error": "Failed to export CSV"}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


│   │   │   # --- End: insight_views.py ---

│   │   │   ├─ upload_views.py

│   │   │   # --- Begin: upload_views.py ---
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.parsers import MultiPartParser
from rest_framework import status, permissions
from django.http import HttpResponse
import logging

from core.serializers.statement_serializer import StatementUploadSerializer
from core.tasks.ocr import extract_text_from_pdf
from core.tasks.preprocess import process_and_store_transactions
from core.models.statement import Statement
from core.models.transaction import Transaction

logger = logging.getLogger(__name__)

class StatementUploadView(APIView):
    parser_classes = [MultiPartParser]
    permission_classes = [permissions.IsAuthenticated]

    def post(self, request):
        logger.info(f"Statement upload attempt by user: {request.user.email}")
        serializer = StatementUploadSerializer(data=request.data)
        if serializer.is_valid():
            statement = serializer.save(user=request.user)
            try:
                file_path = statement.uploaded_file.path
                raw_text = extract_text_from_pdf(file_path)
                statement.raw_text = raw_text
                statement.save()

                txn_count = process_and_store_transactions(user=request.user, statement=statement)
                logger.info(f"Uploaded and processed {txn_count} transactions for user {request.user.email}")
                return Response({
                    "message": "PDF uploaded and processed successfully.",
                    "statement_id": statement.id,
                    "raw_text_snippet": raw_text[:300] + "..." if raw_text else "",
                }, status=status.HTTP_201_CREATED)
            except Exception as e:
                logger.error(f"Statement processing failed: {e}")
                return Response({"error": "Failed to process statement."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

        logger.warning(f"Invalid statement upload: {serializer.errors}")
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class ReprocessStatementView(APIView):
    permission_classes = [permissions.IsAuthenticated]

    def post(self, request, statement_id):
        logger.info(f"Reprocessing statement {statement_id} for user {request.user.email}")
        try:
            statement = Statement.objects.get(id=statement_id, user=request.user)
        except Statement.DoesNotExist:
            return Response({"error": "Statement not found."}, status=status.HTTP_404_NOT_FOUND)

        try:
            # Delete old transactions
            Transaction.objects.filter(statement=statement).delete()

            file_path = statement.uploaded_file.path
            raw_text = extract_text_from_pdf(file_path)
            statement.raw_text = raw_text
            statement.save()

            txn_count = process_and_store_transactions(request.user, statement)
            logger.info(f"Reprocessed statement {statement_id} with {txn_count} transactions for user {request.user.email}")
            return Response({"message": f"Reprocessed successfully. {txn_count} transactions added."})
        except Exception as e:
            logger.error(f"Reprocessing failed: {e}")
            return Response({"error": "Failed to reprocess statement."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

import csv, zipfile
from io import BytesIO, StringIO
from django.http import HttpResponse
from core.models.transaction import Transaction, Statement
from rest_framework.views import APIView
from rest_framework.permissions import IsAuthenticated


class ExportStatementZIP(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request, statement_id):
        try:
            statement = Statement.objects.get(id=statement_id, user=request.user)
        except Statement.DoesNotExist:
            return HttpResponse("Statement not found.", status=404)

        transactions = Transaction.objects.filter(statement=statement)

        # Create in-memory ZIP file
        zip_buffer = BytesIO()
        with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
            # 1. CSV File
            csv_buffer = StringIO()
            writer = csv.writer(csv_buffer)
            writer.writerow(['Date', 'Description', 'Amount', 'Category', 'Credit/Debit'])

            for txn in transactions:
                writer.writerow([
                    txn.date.strftime('%Y-%m-%d'),
                    txn.description,
                    txn.amount,
                    txn.category,
                    'Credit' if txn.is_credit else 'Debit'
                ])

            zip_file.writestr("transactions.csv", csv_buffer.getvalue())

            # 2. OCR Text
            zip_file.writestr("raw_ocr.txt", statement.raw_text or "No text extracted.")

        zip_buffer.seek(0)
        response = HttpResponse(zip_buffer, content_type='application/zip')
        response['Content-Disposition'] = f'attachment; filename=statement_{statement.id}.zip'
        return response

│   │   │   # --- End: upload_views.py ---

│   │   │   ├─ __init__.py

│   │   │   # --- Begin: __init__.py ---
from .auth_views import *
from .upload_views import *
from .insight_views import *

│   │   │   # --- End: __init__.py ---

│   ├─ media/
│   │   ├─ statements/
│   │   │   ├─ sample_bank_statement.pdf
│   │   │   [Could not read sample_bank_statement.pdf: 'utf-8' codec can't decode byte 0xe2 in position 10: invalid continuation byte]
│   │   │   ├─ sample_bank_statement_erFPHqQ.pdf
│   │   │   [Could not read sample_bank_statement_erFPHqQ.pdf: 'utf-8' codec can't decode byte 0xe2 in position 10: invalid continuation byte]
│   │   │   ├─ sample_bank_statement_EyAdWYQ.pdf
│   │   │   [Could not read sample_bank_statement_EyAdWYQ.pdf: 'utf-8' codec can't decode byte 0xe2 in position 10: invalid continuation byte]
│   │   │   ├─ sample_bank_statement_J2yqFS5.pdf
│   │   │   [Could not read sample_bank_statement_J2yqFS5.pdf: 'utf-8' codec can't decode byte 0xe2 in position 10: invalid continuation byte]
│   │   │   ├─ sample_bank_statement_qw0yuce.pdf
│   │   │   [Could not read sample_bank_statement_qw0yuce.pdf: 'utf-8' codec can't decode byte 0xe2 in position 10: invalid continuation byte]
│   │   │   ├─ sample_bank_statement_uZBkevu.pdf
│   │   │   [Could not read sample_bank_statement_uZBkevu.pdf: 'utf-8' codec can't decode byte 0xe2 in position 10: invalid continuation byte]
│   │   │   ├─ sample_bank_statement_yZcGpcs.pdf
│   │   │   [Could not read sample_bank_statement_yZcGpcs.pdf: 'utf-8' codec can't decode byte 0xe2 in position 10: invalid continuation byte]
